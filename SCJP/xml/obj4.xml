<?xml version="1.0" encoding="UTF-8"?>

<obj xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="resources/pytania.xsd"
 >
    <pyt>
        <nr>1</nr>
        <tresc><![CDATA[Before which of the following can the "synchronized" keyword be placed, without casting a compilation error?]]></tresc>
        <level>1</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>3</liczba_poprawnych>
        <odp>class methods</odp>
		<odp>instance methods</odp>
		<odp>any block of code within a method</odp>
		<odp>variables</odp>
		<odp>a class</odp>
        <poprawne>1,2,3</poprawne>
    </pyt>
    <pyt>
        <nr>2</nr>
        <tresc><![CDATA[What will happen when you attempt to compile and run the following code?
        
        1.  public class TestThread extends Thread
        2.  {
        3. 	  public static void main(String[] args)
        4. 	  {
        5.		new TestThread().start();
        6.		new TestThread().start();
        7.	  }
        8.
        9.	  public void run()
        10.   {
        11. 	Safe s1 = new Safe("abc");
        12.		Safe s2 = new Safe("xyz");
        13.	  }
        14. }
        15.
        16. class Safe
        17. {
        18.		private String str;
        19.		public synchronized Safe(String s)
        20.		{
        21.			str = s;
        22.			str.toUpperCase();
        23.			System.out.println(str + " ");
        24.		}
        25.	}
        ]]></tresc>
        <level>1</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>It will print - ABC XYZ ABC XYZ in that sequence</odp>
		<odp>It will print - ABC ABC XYZ XYZ in that sequence</odp>
		<odp>It will print - ABC and XYZ twice, but the sequence cannot be determinated</odp>
		<odp>It will print - abc and xyz twice, but the sequence cannot be determinated</odp>
		<odp>The code will not compile</odp>
        <poprawne>5</poprawne>
    </pyt>
    <pyt>
        <nr>3</nr>
        <tresc><![CDATA[Which of the following lines will not compile?
        
        class MyClass implements Runnable
        {
        public void run(){}
        }
        
        class Test {
        	public static void main(String[] args) throws Exception {
        		Thread t1 = new Thread(); 				// 1
        		Thread t2 = new Thread(new MyClass()); 	// 2
        		Thread t3 = new Thread(new MyClass(), "Thread3"); 	// 3
        		Thread t4 = new Thread("Thread4"); 		// 4
        		Thread t5 = new Thread("Thread5", 5); 	// 5
        		Thread t6 = new Thread("Thread6", new MyClass()); 	// 6
        	}
        }
        ]]></tresc>
        <level>1</level>
        <liczba_odpowiedzi>6</liczba_odpowiedzi>
        <liczba_poprawnych>2</liczba_poprawnych>
        <odp>Line 1</odp>
		<odp>Line 2</odp>
		<odp>Line 3</odp>
		<odp>Line 4</odp>
		<odp>Line 5</odp>
		<odp>Line 6</odp>
        <poprawne>5,6</poprawne>
    </pyt>
    <pyt>
        <nr>4</nr>
        <tresc><![CDATA[Which of the following statements regarding the wait() method are correct?]]></tresc>
        <level>1</level>
        <liczba_odpowiedzi>6</liczba_odpowiedzi>
        <liczba_poprawnych>3</liczba_poprawnych>
        <odp>It is an instance method of Object class</odp>
		<odp>It is a static method of the Object class</odp>
		<odp>It is an instance method of Thread class</odp>
		<odp>The Thread must have a lock on the object on which the wait() method is to be invoked</odp>
		<odp>An object can have only one Thread in a waiting state at a time</odp>
		<odp>It must be called in a synchronized code</odp>
        <poprawne>1,4,6</poprawne>
    </pyt>
    <pyt>
        <nr>5</nr>
        <tresc><![CDATA[What will be result of an attempt to compile and run the following code?
        
        class SimpleThread extends Thread {
        	public SimpleThread(String str) {
        		super(str);
        	}
        	public void run() {
        		for (int i=0; i<10; i++) {
        			System.out.println(i + " " + getName());
        			try 
        			{
        				sleep((long)(Math.random() * 1000));
        			}
        			catch (InterruptedException e) {}
        		}
        		System.out.println("DONE!" + getName());
        	}
        }
        
        public class TwoThreadDemo {
        	public static void main(String[] args) {
        		new SimpleThread("Java Programmer").start(); 	//line A
        		new SimpleThread("Java Programmer").start(); 	//line B
        	}
        }
        ]]></tresc>
        <level>2</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>It will not compile because SimpleThread is a subclass of thread, but does not have a no-argument public constructor.</odp>
		<odp>It will not compile because two separate threads in line A and line B have been given the same name "Java Programmer"</odp>
		<odp>It will compile, but at runtime the second thread will overwrite the first thread and so the run method of the SimpleThread
		class will be executed only once instead of twice.</odp>
		<odp>It will compile but will throw RuntimeException</odp>
		<odp>It will compile and run with success and the run method of SimpleThread class will be executed twice by two separate
		threads created.</odp>
        <poprawne>5</poprawne>
    </pyt>
    <pyt>
        <nr>6</nr>
        <tresc><![CDATA[What will be result of an attempt to compile and run the following code?
        
        public class OrderedThread
        {
        	public static void main(String[] args)
        	{
        		MBThread first,second,third;
        		OrderedThread orderedThread = new OrderedThread();
        		first = new MBThread("One", orderedThread);
        		second = new MBThread("Two", orderedThread);
        		third = new MBThread("Three", orderedThread);
        		second.start();
        		first.start();
        		third.start();
        	}
        	public void display(String msg)
        	{
        		synchronized(msg)
        		{
        			for (int i = 0; i<20; i++)
        			{
        				System.out.println("Name= " + msg);
        			}
        		}
        	}
        }
        
        class MBThread extends Thread
        {
        	String name;
        	OrderedThread orderT;
        	
        	MBThread(String name, OrderedThread orderT)
        	{
        		this.name = name;
        		this.orderT = orderT;
        	}
        	public void run()
        	{
        		orderT.display(name);
        	}
        }
        ]]></tresc>
        <level>2</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>The code compiles fine and prints Two, One, and Three in order and repeats the same for another 19 times</odp>
		<odp>The code compiles fine and prints Two 20 times, One 20 times, and Three 20 times sequentialy. However, the order
		whether Two will come first, then One, and at last Three is not guaranteed</odp>
		<odp>The code compiles fine and prints Two 20 times, One 20 times, and Three 20 times sequentialy and the behavior is guaranteed</odp>
		<odp>The code compiles fine and prints Two, One, and Three 20 times each in an indefinite order</odp>
		<odp>The code compiles fine but throws InterruptedException due to synchronization of msg String in a wrong way</odp>
        <poprawne>4</poprawne>
    </pyt>
    <pyt>
        <nr>7</nr>
        <tresc><![CDATA[Which of the following statements are true about the sleep method of Thread class?]]></tresc>
        <level>2</level>
        <liczba_odpowiedzi>4</liczba_odpowiedzi>
        <liczba_poprawnych>2</liczba_poprawnych>
        <odp>A thread releases any locks it is holding when it is invoked on the thread</odp>
		<odp>It is defined as static within the Thread class</odp>
		<odp>A thread starts running as soon as it wakes up from  the sleeping state</odp>
		<odp>The sleep method throws InterruptedException</odp>
        <poprawne>2,4</poprawne>
    </pyt>
    <pyt>
        <nr>8</nr>
        <tresc><![CDATA[There are three thread trying to invoke a method of an object. This method is a synchronized method to prevent conflict between Threads
        
        While Thread1 is executing method, Thread2 and Thread3, in that order attempt to invoke the method. What happens when Thread1 exits method?
        ]]></tresc>
        <level>2</level>
        <liczba_odpowiedzi>4</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>Thread2 will be the first waiting Thread to execute the method</odp>
		<odp>Thread3 will be the first waiting Thread to execute the method</odp>
		<odp>The order in which the Thread2 and Thread3 will invoke the method cannot be determinated</odp>
		<odp>None of these</odp>
        <poprawne>3</poprawne>
    </pyt>
    <pyt>
        <nr>9</nr>
        <tresc><![CDATA[Given that a static method doIt() in the Work class represents work to be done, which of the following blocks of code 
        will succeed in starting a new thread that will do the work?]]></tresc>
        <level>2</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp><![CDATA[Runnable r = new Runnable() {
        	public void run() {
				Work.doIt();
			}
			};
		Thread t = new Thread(r);
		t.start();        	
       	]]></odp>
		<odp><![CDATA[Thread t = new Thread() {
			public void start() {
				Work.doIt();
			}
			};
			t.start();
		]]></odp>
		<odp><![CDATA[Runnable r = new Runnable() {
        	public void run() {
				Work.doIt();
			}
			};
		r.start();        	
       	]]></odp>
		<odp><![CDATA[Thread t = new Thread(new Work());
		t.start();
		]]></odp>
		<odp><![CDATA[Runnable t = new Runnable() {
			pubilc void run() {
				Work.doIt();
			}
			t.start();
		]]></odp>
        <poprawne>1</poprawne>
    </pyt>
    <pyt>
        <nr>10</nr>
        <tresc><![CDATA[You have created a TimeOut class as an extension of Thread, the purpose being to print a "Time's Up" message if the Thread is not interrupted within 10 seconds of being started. Here is the run method that you have coded.
        
        public void run()
        {
        	System.out.println("Start!");
        	try 
        	{
        		Thread.sleep(10000);
        		System.out.println("Time's Up");
        	} 
        	catch (InterruptedException e)
        	{
        		System.out.println("Interrupted");
        	}
        }
        
        Given that a program creates and starts a TimeOut object, which of the following statements is true?
        ]]></tresc>
        <level>2</level>
        <liczba_odpowiedzi>4</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
		<odp>Exactly 10 seconds after the start method is called, "Time's Up" will be printed</odp>
		<odp>Exactly 10 seconds after "Start!" is printed, "Time's Up" will be printed</odp>
		<odp>The deley between "Start!" being printed and "Time's Up" will be 10 seconds plus or minus one tick of the system clock</odp>
		<odp>If "Time's Up" is printed you can be sure that at least 10 seconds have elapsed since "Start!" was printed</odp>
        <poprawne>4</poprawne>
    </pyt>
    <pyt>
        <nr>11</nr>
        <tresc><![CDATA[There are 10 threads waiting for the lock of an object. How will you bring the 5th thread myThread out of the waiting state?]]></tresc>
        <level>2</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>By calling notify(5)</odp>
		<odp>By calling notifyAll()</odp>
		<odp>By calling myThread.notify()</odp>
		<odp>By calling notify(myThread)</odp>
		<odp>None of these</odp>
        <poprawne>2</poprawne>
    </pyt>
    <pyt>
        <nr>12</nr>
        <tresc><![CDATA[What can you write at the comment //A in the code below so that	this program causes the word "running" to be printed to the standard output using a new thread of execution
        
        class RunTest implements Runnable {
        	public static void main(String[] args) {
        		RunTest rt = new RunTest();
        		Thread t  = new Thread(rt);
        		//A
        	}
        	public void run() {
        		System.out.println("running");
        	}
        	void go() {
        		start(1);
        	}
        	void start(int i) {
        	}
        }
        ]]></tresc>
        <level>2</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>rt.run()</odp>
		<odp>rt.start()</odp>
		<odp>rt.go()</odp>
		<odp>rt.start(1)</odp>
		<odp>None of these</odp>
        <poprawne>5</poprawne>
    </pyt>
    <pyt>
        <nr>13</nr>
        <tresc><![CDATA[What will happen when you attepmt to compile and run the following code?
        
        public class ThreadTest implements Runnable
        {
        	private int x;
        	public int getData()
        	{	
        		synchronized(x)
        		{
        			x = 123;
        			x = x + 12;
        		}
        		return x;
        	}
        	public void run()
        	{
        		System.out.println(getData() + " ");
        	}
        	public static void main(String[] args)
        	{
        		ThreadTest test = new ThreadTest();
        		Thread th1 = new Thread(test);
        		Thread th2 = new Thread(test);
        		th1.start();
        		th2.start();
        	}
        }
        ]]></tresc>
        <level>2</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>It will print: 135 135</odp>
		<odp>It will print: 123 135</odp>
		<odp>It will print: 135 123</odp>
		<odp>It will print the values 123 and 135 but sequence can not be guaranteed</odp>
		<odp>The code will not compile</odp>
        <poprawne>5</poprawne>
    </pyt>
    <pyt>
        <nr>14</nr>
        <tresc><![CDATA[What will be the result of attempting to compile and run the following program?
        
        class MyThread extends Thread {
        	String sa;
        	public MyThread(String sa) {
        		this.sa = sa;
        	}
        	public void run() {
        		synchronized(sa) {
        			while(!sa.equals("Done")) {
        				try {
        					sa.wait();
        				} 
        				catch (InterruptedException ie) {}
        			}
        		}
        		System.out.println(sa);
        	}
        }
        class Test {
        	private static String sa = new String("Not Done");
        	public static void main(String[] args) {
        		Thread t1 = new MyThread(sa);
        		t1.start();
        		synchronized(sa) {
        			sa = new String("Done");
        			sa.notify();
        		}
        	}
        }
        ]]></tresc>        
        <level>3</level>
        <liczba_odpowiedzi>6</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>Does not compile</odp>
		<odp>Throws exception at runtime</odp>
		<odp>Prints "Done"</odp>
		<odp>Prints "Not Done"</odp>
		<odp>May print "Done" or "Not Done"</odp>
		<odp>None of the above</odp>
        <poprawne>2</poprawne>
    </pyt>    
    <pyt>
        <nr>15</nr>
        <tresc><![CDATA[What will be the result of attempt to compile and run the following program?
        
class Test implements Runnable {
	public void run() {
		String str = "hello";
		synchronized (str) {
        	try {
        		System.out.print(Thread.currentThread().getName());
        		Thread.sleep(500);
        		System.out.print(Thread.currentThread().getName());
        	}
        	catch (InterruptedException e) {}
        }
	}
	public static void main(String[] args) {
	new Thread(new Test(), "A").start();
       	new Thread(new Test(), "B").start();
    }
}
        ]]></tresc>
        <level>3</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>Prints "ABAB" or "BABA"</odp>
		<odp>Prints "AABB" or "BBAA"</odp>
		<odp>Result cannot be predicted</odp>
		<odp>Compiler error</odp>
		<odp>An exception is thrown</odp>
        <poprawne>2</poprawne>
    </pyt>
    <pyt>
        <nr>16</nr>
        <tresc><![CDATA[What will be the result of compiling and running the following program?
        
	class TestThread extends Thread {
        private int i;
        static String s = new String("hi");
        TestThread(String s) {
			super(s);
        }
        public String getObj() {
        	return s;
        }
        public void run() {
	       	try {
        		synchronized(this.getObj())
        		{
	       			System.out.println(
	       				Thread.currentThread().getName()
	       			);
	       			Thread.sleep(1000);
	      			System.out.println(
	      				Thread.currentThread().getName()
	      			);
        		}
        	}
        	catch (InterruptedException e)
        	{}
        }
        public static void main(String[] args) {
        	TestThread t1 = new TestThread("A");
        	TestThread t2 = new TestThread("B");
        	t1.start();
        	t2.start();
        }
	}
        ]]></tresc>
        <level>3</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>Prints "AABB" or "BBAA"</odp>
        <odp>Prints "ABAB" or "BABA"</odp>
		<odp>Result cannot be predicted</odp>
		<odp>Compiler error</odp>
		<odp>An exception is thrown</odp>
        <poprawne>1</poprawne>
    </pyt>
    <pyt>
        <nr>17</nr>
        <tresc><![CDATA[Which of the following statements are true about synchronization?]]></tresc>
        <level>3</level>
        <liczba_odpowiedzi>4</liczba_odpowiedzi>
        <liczba_poprawnych>2</liczba_poprawnych>
		<odp>Static methods cannot be synchronized</odp>
		<odp>Synchronized methods cannot make calls to non-synchronized methods</odp>
		<odp>A synchronized method can be overriden to be non-synchronized and vice versa</odp>
		<odp>When a thread is executing a synchronized method, other threads can freely access non-synchronized methods of the same object</odp>
        <poprawne>3,4</poprawne>
    </pyt>
    <pyt>
        <nr>18</nr>
        <tresc><![CDATA[What will be the result of attempt to compile and run the following code?
        
	class TestThread extends Thread {
       	public void restart()
       	{	
       		startMe();
       	}
       	public static startMe()
       	{
       		synchronized(this)
       			{
       				notifyAll();
       				System.out.println("Trying to notify");
       			}
       	}
       	public void run() {
       		try
       		{
       			synchronized(this)
       			{	
       				wait();
       				System.out.println("Notified");
       			}
       		}
       		catch (InterruptedException e)
       		{}
       	}
       	public static void main(String[] args) {
       		TestThread t1 = new TestThread();
       		t1.start();
       		t1.restart();
       	}
	}
        ]]></tresc>
        <level>3</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>"Trying to Notify" is printed followed by "Notified"</odp>
		<odp>"Trying to Notify" alone is printed</odp>
		<odp>No output</odp>
		<odp>Compiler error</odp>
		<odp>Throws an exception at runtime</odp>
        <poprawne>4</poprawne>
    </pyt>
    <pyt>
        <nr>19</nr>
        <tresc><![CDATA[What will be the result of attempt to compile and run the following program?
        
	class MyRunnable implements Runnable {
		String[] s;
		public MyRunnable(String[] s) {
			this.s = s;
		}
		public void run() {
			synchronized(this) {
				try{
					wait(5000);
	        		System.out.println(s[0] + s[1] + s[2]);
				}
	        	catch (InterruptedException e){}
	        }
		}
	}
	
	class Test {
		public static void main(String[] args) throws Exception{
			String[] s = new String[]{"1", "2", "3"};
			MyRunnable myRunnable = new MyRunnable(s);
	   		Thread t1 = new Thread(myRunnable);
			t1.start();
			t1.join(5000);
			s[0] = "A";
			s[1] = "B";
			s[2] = "C";
		}
	}
        ]]></tresc>
        <level>3</level>
        <liczba_odpowiedzi>6</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
        <odp>Prints "123"</odp>
		<odp>Prints "ABC"</odp>
		<odp>Output cannot be predicted</odp>
		<odp>Code will not compile</odp>
		<odp>Code throws exception at runtime</odp>
		<odp>None of the above</odp>
        <poprawne>3</poprawne>
    </pyt>
    <pyt>
        <nr>20</nr>
        <tresc><![CDATA[Which of the following statements regarding thread is true?]]></tresc>
        <level>3</level>
        <liczba_odpowiedzi>4</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
		<odp>A thread dies as soon as the execution of the start() method ends</odp>
		<odp>A thread's priority can be specified as an argument to its constructor</odp>
		<odp>A sleeping thread can be made runnable by invoking notify()</odp>
		<odp>A thread can call notify() on an object only if it holds the lock on that object</odp>
        <poprawne>4</poprawne>
    </pyt>
    <pyt>
        <nr>21</nr>
        <tresc><![CDATA[What will be the result of attempt to compile and run the following program?
        
	class TestThread extends Thread {
       	static String s = new String("hi");
       	public void run() {
       		try
       		{
       			synchronized (s) 
       			{
    	   			System.out.println(Thread.currentThread().getName());
      				Thread.sleep(5000);
        			System.out.println(Thread.currentThread().getName());
        		}
    	    }
    	    catch (InterruptedException e)
			{}
        }
        
        public static void main(String[] args) {
        	TestThread t1 = new TestThread("A");
        	TestThread t2 = new TestThread("B");
        	t1.start();
        	t2.start();
        }
	}]]></tresc>
        <level>3</level>
        <liczba_odpowiedzi>5</liczba_odpowiedzi>
        <liczba_poprawnych>1</liczba_poprawnych>
		<odp>Result cannot be predicted</odp>
        <odp>Prints "AABB" or "BBAA"</odp>
        <odp>Prints "ABAB" or "BABA"</odp>
		<odp>Compiler error</odp>
		<odp>An exception is thrown</odp>
        <poprawne>4</poprawne>
    </pyt>
    <pyt>
        <nr>22</nr>
        <tresc><![CDATA[Given the following code, which of the given statements are true for an instance of the Vertical class?
        
        public class Vertical {
        	private int alt;
        	public synchronized void up() {
        		++alt;
        	}
        	public void down() {
        		--alt;
        	}
        	public synchronized void jump() {
        		int a = alt;
        		up();
        		down();
        		assert(a==alt);
        	}
        }
        ]]></tresc>
        <level>3</level>
        <liczba_odpowiedzi>6</liczba_odpowiedzi>
        <liczba_poprawnych>2</liczba_poprawnych>
        <odp>Code does not compile</odp>
		<odp>Code will compile only if the assert statement is removed</odp>
		<odp>AssertionError will never be thrown by this code</odp>
		<odp>AssertionError may or may not be thrown by this code</odp>
		<odp>Multiple threads may execute up() method simultaneously</odp>
		<odp>Multiple threads may execute down() method simultaneously</odp>
        <poprawne>4,6</poprawne>
    </pyt>
    <pyt>
        <nr>23</nr>
        <tresc><![CDATA[Given the following run() method of a thread, which are the ways in which the thread will surely come out of the waiting state?
        
        public void run() {
        	synchronized (this) {
        		try{
					wait(5000);
	        	}
	        	catch(InterruptedException e)
	        	{}
        	}
        }
        ]]></tresc>
        <level>3</level>
        <liczba_odpowiedzi>6</liczba_odpowiedzi>
        <liczba_poprawnych>3</liczba_poprawnych>
        <odp>Another thread which owns the lock of the object invokes notify()</odp>
		<odp>Another thread which owns the lock of the object invokes notifyAll()</odp>
		<odp>The time period of 5000 miliseconds has elapsed</odp>
		<odp>Another thread invokes join() on the thread</odp>
		<odp>Another thread invokes interrupt() on the thread</odp>
		<odp>Another thread invokes resume() on the thread</odp>
        <poprawne>2,3,5</poprawne>
    </pyt>
</obj>
